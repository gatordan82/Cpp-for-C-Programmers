/**********************************************************************  Filename:  ch6-ex17.cpp  Chapter:   6      Operator Overloading and Conversions  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************///An implementation of dynamically allocated strings.// with conversions and overloaded assignment#include <string.h>#include <iostream.h>#include <assert.h>class my_string {public:   my_string() : len(0)      { s = new char[1];assert(s != 0); s[0] = 0; }   my_string(const my_string& str); //copy constructor   my_string(const char* p);        //conversion constructor   ~my_string() { delete []s; }   void print() const { cout << s << endl; }   my_string::operator char*();     //conversion to char*private:   char*  s;   int    len;};my_string::operator char*(){   char*  p = new char[len + 1];   assert(p != 0);   strcpy(p, s);   return p;}my_string::my_string(const char* p){   len = strlen(p);   s = new char[len + 1];   assert(s != 0);   strcpy(s, p);}my_string::my_string(const my_string& str) : len(str.len){   s = new char[len + 1];   assert(s != 0);   strcpy(s, str.s);}void swap(my_string x, my_string y){   my_string temp;   temp = x;   x = y;   y = temp;}int main(){   my_string  b("dont try me "), c(" try me");   cout << b << c << endl;   swap(b, c);   cout << b << c << endl;   int i; cin >> i;}