/**********************************************************************  Filename:  point6.cpp  Chapter:   6      Operator Overloading and Conversions  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************/#include <iostream>#include <math>//using namespace std;class point {   double x, y;        //implicitly privatepublic:   point() { x = 0; y = 0; }                   //default   point(double u) { x = u; y = 0;}            //double to point   point(double u, double v) { x = u; y = v; }   operator double();   void print() { cout << "(" << x << "," << y << ")"; }   void init(double u, double v) { x = u; y = v; }   void plus(point c);};void point::plus(point c)     //definition not inline{//offset the existing point by point c   x += c.x;   y += c.y;}point::operator double()      //use distance from origin{    return sqrt(x * x + y * y);}int main(){   point w1, w2(1.1), w3(2.2, 3.3);   double z = 0.0;   cout << "\npoint w1 = ";   w1.print();   cout << "\npoint w2 = ";   w2.print();   cout << "\npoint w3 = ";   w3.print();   w3.plus(w2);   cout << "\npoint w3 after plus = ";   w3.print();   z = w3;   cout << "\nz is " << z << endl;   int look; cin >> look;}