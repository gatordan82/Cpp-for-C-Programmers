/**********************************************************************  Filename:  ch4-ex18.cpp  Chapter:   4      Classes  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************/#include <iostream>#include <stdlib>//using namespace std;//A poker calculation on flushingenum  suit_val { clubs, diamonds, hearts, spades };class suit {public:   void  assign(int n) { s = n / 13; }   int   getsuit() const { return s; }   void  print() const;private:   suit_val  s;};class pips {public:   void  assign(int n) { p = n % 13 + 1; }   int   getpip() { return p; }   void  print() { cout << p; }private:   int  p;};class card {public:   suit  s;   pips  p;   void  assign(int n)      { cd = n; s.assign(n); p.assign(n); }   void  pr_card();private:   int  cd;      //a cd is from 0 to 51};class deck {public:   void  init_deck();   void  shuffle();   void  deal(int, int, card*);   void  pr_deck();private:   card  d[52];};void deck::init_deck(){   for (int i = 0; i < 52; ++i)      d[i].assign(i);}void  deck::shuffle(){   for (int i = 0; i < 52; ++i) {      int  k = i + (rand() % (52 - i));      card  t = d[i];               //swap cards      d[i] = d[k];      d[k] = t;   }}void deck::deal(int n, int pos, card* hand){   for (int i = pos; i < pos + n; ++i)      hand[i - pos] = d[i];}int main(){   card one_hand[9];       //max hand is 9 cards   deck dk;   int  i, j, k, fcnt = 0, sval[4];   int  ndeal, nc, nhand;   do {      cout << "\nEnter no. cards in a hand (5-9):";      cin  >> nc;   } while (nc < 5 || nc > 9);   nhand = 52 / nc;   cout << "\nEnter no. of hands to deal: ";   cin  >> ndeal;   srand(time(NULL));      //seed rand() from time()   dk.init_deck();   for (k = 0; k < ndeal; k += nhand) {      if ((nhand + k) > ndeal)         nhand = ndeal - k;      dk.shuffle();      for (i = 0; i < nc * nhand; i += nc) {         for (j = 0; j < 4; ++j)  //zero suit counts            sval[j] = 0;      dk.deal(nc, i, one_hand);  //deal next hand      for (j = 0; j < nc; ++j)         sval[one_hand[j].s.getsuit()]++; //increment suit count      for (j = 0; j < 4; ++j)         if (sval[j] >= 5)      //5 or more is flush             fcnt++;      }   }   cout << "\n\nIn " << ndeal << " ";   cout << nc << "-card hands there were ";   cout << fcnt << " flushes\n   ";   int look; cin >> look;}