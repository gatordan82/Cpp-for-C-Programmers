/**********************************************************************  Filename:  pr_card2.cpp  Chapter:   E      Appendix E - Input/Output  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************/#include <iostream>#include <stdlib>//#include <//using namespace std;//card outputchar  pips_symbol[14] = { '?', 'A', '2', '3', '4',        '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K' };char  suit_symbol[4] = { 'c', 'd', 'h', 's' };enum suit { clubs, diamonds, hearts, spades };class pips {public:   void  assign(int n) { p = n % 13 + 1; }   friend ostream& operator<<(ostream& out, pips x);private:   int  p;};ostream& operator<<(ostream& out, pips x){    return (out << pips_symbol[x.p]);}class card {public:   suit  s;   pips  p;   void  assign(int n)      { cd = n; s = suit(n / 13); p.assign(n); }   friend ostream& operator<<(ostream& out, card cd);private:   int  cd;                 //a cd is from 0 to 51};ostream& operator<<(ostream& out, card cd){   return (out << cd.p << suit_symbol[cd.s] << "  " );}class deck {public:   void  init_deck();   void  shuffle();   void  deal(int, int, card*);   friend ostream& operator <<(ostream& out, deck x);private:   card d[52];};ostream& operator<<(ostream& out, deck x){   for (int i = 0; i < 52; ++i) {      if (i % 13 == 0)      //13 cards to a line         out << endl;      out << x.d[i];   }   return out;}void  deck::init_deck(){   for(int i = 0; i < 52; ++i)      d[i].assign(i);}int main(){   deck dk;   randomize();   dk.init_deck();   cout << "This is the deck\n" << dk << endl;   int look; cin >> look;}