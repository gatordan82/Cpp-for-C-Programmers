/**********************************************************************  Filename:  stl_int2.cpp  Chapter:   7      Templates Generic Programming and STL  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************/#include <iostream>#include <numeric>#include <algorithm>#include <vector>using namespace std;//Simple integration routine for x*x over (0, 1)//The function is represented in class genclass gen {          //generator for function to be integratedpublic:   gen(double x_zero, double increment) : x(x_zero),    incr(increment) { }   double operator()() { x += incr; return x*x; }private:   double x, incr;};double integrate( gen g, int n, double& diff){   vector<double> fx(n), sm(n), lg(n);   double s, l;   generate(fx.begin(),fx.end(), g );   for (int i = 0; i < n - 1; ++i)      if (fx[i] > fx[i + 1]) {         sm[i] = fx[i + 1]; lg[i] = fx[i];      }      else {         sm[i] = fx[i]; lg[i] = fx[i + 1];      }   s = accumulate(sm.begin(), sm.end(), 0.0)/n ;   l = accumulate(lg.begin(), lg.end(), 0.0)/n ;   diff = l - s;   return ( s + l ) / 2;}int main(){   const int n = 10000;   gen g(0.0, 1.0/n);   cout << "integration program x**2" << endl;   cout << integrate(g, n, 1000.0) << endl;   int look; cin >> look;}