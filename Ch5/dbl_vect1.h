/**********************************************************************  Filename:  dbl_ve~1.h  Chapter:   5      Constructors and Destructors  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************/#include <iostream>//using namespace std;//Implementation of a safe array type dbl_vectclass dbl_vect {public:   explicit dbl_vect(int n = 10);   ~dbl_vect() { delete []p; }   double& element(int i);                  //access p[i]   double dot_prod(const dbl_vect& v) const;   int  ub() const { return (size - 1); }   //upper bound   void print() const;private:   double*  p;   int      size;};dbl_vect::dbl_vect(int n) : size(n){   assert(n > 0);   p = new double[size];   assert(p != 0);}double& dbl_vect::element(int i){   assert (i >= 0 && i < size);   return p[i];}void dbl_vect::print()const{   cout << " vector of size " << size << endl;   for (int i = 0; i <size; ++i)      cout << p[i] << "\t";}double dbl_vect::dot_prod(const dbl_vect& v) const{   assert(size == v.size);   double sum = 0.0;   for (int i = 0; i < size; ++i)      sum += p[i] * v.p[i];   return sum;}