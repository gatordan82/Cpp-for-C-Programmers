/**********************************************************************  Filename:  matrix1.cpp  Chapter:   5      Constructors and Destructors  Compiler:  Borland C++     Version 5.01      Summer 1998  C++ for C Programmers, Edition 3     By Ira Pohl********************************************************************/#include <iostream>#include <assert>//using namespace std;//A two-dimensional safe array type matrixclass matrix {public:   matrix(int d1, int d2);   ~matrix();   int  ub1() const { return(s1 - 1); }   int  ub2() const { return(s2 - 1); }   double&  element(int i, int j);private:   double**  p;   int    s1, s2;};matrix::matrix(int d1, int d2) : s1(d1), s2(d2){   assert(d1 > 0 && d2 > 0);   p = new double*[s1];   assert(p != 0);   for (int i = 0; i < s1; ++i){      p[i] = new double[s2];      assert(p[i] != 0);   }}matrix::~matrix(){   for (int i = 0; i <= ub1(); ++i)      delete []p[i];   delete []p;}double& matrix::element(int i, int j){  assert(i >= 0 && i <= ub1() && j >= 0 && j <= ub2());  return p[i][j];}int main(){   matrix a(4, 4), b(4, 6), c(4, 6);   int i, j;   for (i = 0; i <= a.ub1(); ++i) {      cout << "\n";      for (j = 0; j <= a.ub2(); ++j) {         a.element(i, j) = i + j;         cout << a.element(i, j) << "\t";      }   }   for (i = 0; i <= b.ub1(); ++i) {      cout << "\n";      for (j = 0; j <= b.ub2(); ++j) {         b.element(i, j) = i + j;         cout << b.element(i, j) << "\t";      }   }   int look; cin >> look;}